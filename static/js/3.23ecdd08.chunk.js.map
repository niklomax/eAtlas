{"version":3,"sources":["components/GeomExplore.jsx","components/DUI.jsx"],"names":["GeomExplore","props","useState","data","setData","useEffect","geom","geometry","coordinates","join","style","color","sfType","wordBreak","length","substring","url","Constants","PRD_URL","DUI","state","checked","loading","_fetchAndUpdateState","bind","_generateBarChart","key","sublist","this","bars","slice","sub_data","propertyCount","margin","left","bottom","title","humanize","xType","width","height","padding","text","fill","tickPadding","tickLabelAngle","tickFormat","v","format","aURL","fullURL","fetchData","error","setState","features","name","dark","className","background","File","contentCallback","json","JSON","parse","URL","urlCallback","id","shortenName","Variables","propertyValuesCallback","sort","a","b","AddVIS","noAccordion","noLimit","plotStyle","window","innerWidth","Table","React","Component"],"mappings":"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","file":"static/js/3.23ecdd08.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { sfType } from '../geojsonutils';\n\nexport default function GeomExplore(props) {\n  const [data, setData] = useState(props.data)\n  useEffect(() => {\n      setData(props.data);\n  }, [props.data])\n  const geom = data[0].geometry && data[0].geometry.coordinates.join(' - ');\n  return (\n    <div style={{ color: 'white' }}>\n      First row is: {' '} {sfType(data[0])}\n      <p style={{wordBreak: 'break-all'}}>\n        {geom.length > 50 ? geom.substring(0, 50) + \" ... \" + geom.length + \" characters long.\" : geom}\n      </p>\n    </div>\n  )\n}","/**\n * WIP to see if it is possible to match data to appropriate UI.\n * \n * Expert/novice users could decide to explore the data they want\n * they way they want. \n * \n * 1. Select your variable.\n * 2. Select the type of UI for the variable.\n * 3. Select the values you like to explore\n * 4. Select the visualization for those values.\n * \n */\nimport React from 'react';\nimport { FlexibleXYPlot, VerticalBarSeries, XAxis, YAxis } from 'react-vis';\nimport { format } from 'd3-format';\n\nimport {\n  shortenName,\n  fetchData, humanize\n} from '../utils';\nimport Variables from './Variables';\nimport Constants from '../Constants';\nimport File from './File';\nimport GenerateUI from './UI';\nimport URL from './URL';\nimport { propertyCount } from '../geojsonutils';\nimport GeomExplore from './GeomExplore';\nimport Table from './Table';\nimport AddVIS from './AddVIS';\n\nconst WIDTH = 400;\nconst BAR_HEIGHT = 320;\nconst url = (process.env.NODE_ENV === 'development' ? Constants.DEV_URL : Constants.PRD_URL);\n\nexport default class DUI extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      checked: false,\n      loading: true\n    }\n    this._fetchAndUpdateState = this._fetchAndUpdateState.bind(this);\n    this._generateBarChart = this._generateBarChart.bind(this);\n  }\n\n  _generateBarChart(key, sublist) {\n    const { data } = this.state;\n    if (!key || !sublist) return;\n    let bars = sublist;\n    if (sublist.length > 10) {\n      bars = bars.slice(0, 10)\n    }\n    let sub_data = propertyCount(data, key, bars);\n    return (\n      <FlexibleXYPlot\n        margin={{ left: 100, bottom: 100 }}\n        title={humanize(key)}\n        xType=\"ordinal\"\n        width={WIDTH} height={BAR_HEIGHT}\n        style={{\n          padding: 10,\n        }}>\n        <YAxis\n          style={{ text: { fill: '#fff' } }}\n          tickPadding={10}\n          tickLabelAngle={-45}\n          tickFormat={v => format(\".2s\")(v)} />\n        <XAxis\n          style={{ text: { fill: '#fff' } }}\n          tickLabelAngle={-45}\n          tickFormat={v => (v + \"\").length > 15 ? (v + \"\").substring(0, 8) + \"...\" : v}\n        />\n        <VerticalBarSeries\n          // color={v => v === \"Fatal\" ? 1 : v === \"Slight\" ? 0 : null}\n          data={sub_data} />\n      </FlexibleXYPlot>\n    )\n  }\n\n  _fetchAndUpdateState(aURL) {\n    // TODO: more sanity checks?\n    const fullURL = aURL ?\n      aURL : url + \"/api/stats19\";\n\n    fetchData(fullURL, (data, error) => {\n      if (!error) {\n        this.setState({\n          loading: false,\n          data: data.features,\n          name: aURL || url\n        })\n      } else {\n        this.setState({\n          loading: false,\n        })\n        //network error?\n      }\n    })\n  }\n\n  componentDidMount() {\n    this._fetchAndUpdateState()\n  }\n\n  // componentDidUpdate(prevProps) {\n  // this._fetchAndUpdateState()\n  // }\n\n  render() {\n    const { data, key, sublist, name, loading } = this.state;\n    const { dark } = this.props;\n    return (\n      <div className=\"content\" style={{\n        background: dark ? '#242730' : 'white',\n        margin: 'auto', padding: '5%', color: dark ? '#a3a5a8' : 'black'\n      }}>\n\n        <File contentCallback={({ text, name }) => {\n          try {\n            const json = JSON.parse(text)\n            this.setState({\n              name,\n              data: json.features\n            })\n          } catch (error) {\n            // log?\n          }\n        }} />\n        <center>\n          <URL\n            dark={dark}\n            urlCallback={(url) => {\n              this._fetchAndUpdateState(url)\n            }} />\n        </center>\n        {loading && <div id=\"loading\"></div>}\n        {\n          data && <h3>\n            There are {` ${data.length} `} features in this\n                ({shortenName(name)}) resource.\n              </h3>\n        }\n        {\n          data && data.length > 0 &&\n          <Variables\n            dark={this.props.dark}\n            data={data}\n            propertyValuesCallback={({ key, sublist }) =>\n              this.setState({\n                key,\n                sublist: sublist.sort((a, b) => { return (a - b) })\n              })} />\n        }\n        {\n          //geometry explore\n          data && data.length > 0 &&\n          <GeomExplore data={data} />\n        }\n        {\n          key && sublist &&\n          <>\n            <hr />\n            <GenerateUI title={humanize(key)} sublist={sublist} />\n          </>\n        }\n        {\n          key && sublist &&\n          <center>\n            <h5>\n              For ({humanize(key)}) and its variables:\n                </h5>\n            <hr />\n            {this._generateBarChart(key, sublist)}\n          </center>\n        }\n        {/* {\n              key && sublist && <div>\n                <p>Key: {key}</p>\n                {\n                  sublist.map((each, i) => <p key={each + \"-\" + i}>{each}</p>)\n                }\n              </div>\n            } */}\n        <AddVIS data={data} noAccordion={true} noLimit={true}\n          plotStyle={{\n            // TODO better sizing needed\n            width: window.innerWidth > 960 ? 960 : window.innerWidth\n          }}\n        />\n        <p>Data preview:</p>\n        <Table data={data} />\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}